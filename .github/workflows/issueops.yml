name: Create repository with IssueOps
on:
  issues:
    types: [opened]   
  

jobs:
  Create-Repo:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'issueops')
    steps:
      # PAT requires at least admin:org, repo       
      - name: Create GitHub repo
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.ISSUE_OPS_6 }}
          script: |            
            bodySplit = context.payload.issue.body.split("\r\n")
            let newRepoStr = bodySplit[0].split("?")
            let templateRepoStr = bodySplit[1].split("?")
            let teamStr = bodySplit[2].split("?")
            let enableIssueStr = bodySplit[3].split("?")
            let enableSquashMergeStr = bodySplit[4].split("?")

            let newRepo = newRepoStr[1]
            let templateRepo = templateRepoStr[1]
            let teams = teamStr[1]
            let enableIssue = enableIssueStr[1]
            let enableSquashMerge = enableSquashMergeStr[1]

            console.log(bodySplit)
            console.log("New repository name: " + newRepo)
            console.log("Template Repository: " + templateRepo)
            console.log("Team: " + teams)
            console.log("Enable Issue: " +  enableIssue)
            console.log("Allow Squash Merge: " +  enableSquashMerge)
            
            console.log("Calling GitHub API to create new repo: " + newRepo + " Template Repo: " + templateRepo + " Team: " + teams)
            
            try {
              await github.rest.repos.createUsingTemplate({
                template_owner: context.payload.organization.login,
                template_repo: templateRepo,
                name: newRepo,
                owner: context.payload.organization.login,
                description: "This repo generated by IssueOps",
                include_all_branches: false,
                private: false
              })
            } catch(err) {
                throw err 
            }
            console.log("Repo created: " + newRepo)


            try {
              await github.rest.repos.update({
                owner: context.payload.organization.login,
                private: true,
                repo: newRepo,
                has_issues: enableIssue,
                has_projects: enableIssue,
                allow_squash_merge: enableSquashMerge
              })
            } catch(err) {
                throw err 
            }
            console.log("Enabled Issue: " + enableIssue)
            console.log("Enabled Project: " + enableIssue)
            
            try {
              await github.rest.repos.updateBranchProtection({
                "owner": context.payload.organization.login,
                "repo": newRepo,
                "branch": 'main',
                "required_status_checks": { "strict": true, "contexts": [] },
                "enforce_admins": true,
                "required_pull_request_reviews": {"dismissal_restrictions": {"users":[], "teams":[]}, "dismiss_stale_reviews": false, "require_code_owner_reviews": true, "required_approving_review_count": 1},
                "restrictions" : { "users": [], "teams": [], "apps": [] }
              })
            } catch(err) {
                throw err 
                
            }
            console.log("Enabled branch protection rules")
            
            try {
              await github.rest.teams.addOrUpdateRepoPermissionsInOrg({
                org: context.payload.organization.login,
                owner: context.payload.organization.login,
                repo: newRepo,
                team_slug: teams,
                permission: 'push'
              })
            } catch(err) {
                throw err 
            }
            console.log("Assigned team write permission: " + teams)

            
            try { 
              await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Thanks for creating a repo. Your new repo is available at: https://github.com/' + context.payload.organization.login + "/" + newRepo
             }) 
            } catch(err) {
                throw err
            }
            console.log("Completed repo configurations")
